PRAGMA foreign_keys = off;
BEGIN TRANSACTION;


DROP TABLE IF EXISTS COSTSHARING;
CREATE TABLE COSTSHARING
(
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    STATUSID INTEGER NOT NULL,
    CREATIONDATE TEXT NOT NULL,
    LOGOPATH TEXT,
    NAME TEXT NOT NULL,
    BUSINESSNAME TEXT,
    DOCUMENT1 TEXT NOT NULL UNIQUE,
    DOCUMENT2 TEXT,
    DOCUMENT3 TEXT,
    ZIPCODE TEXT,
    ADDRESS TEXT,
    NUMBER TEXT,
    COMPLEMENT TEXT,
    DISTRICT TEXT,
    CITY TEXT,
    STATE TEXT,
    NOTE LONGTEXT,
    LASTLOCALSEQ INTEGER NOT NULL DEFAULT 0,
    USERID INTEGER NOT NULL,
    FOREIGN KEY (USERID) REFERENCES USER (ID) ON DELETE RESTRICT
);
INSERT INTO COSTSHARING (ID, STATUSID, CREATIONDATE, LOGOPATH, NAME, BUSINESSNAME, DOCUMENT1, DOCUMENT2, DOCUMENT3, ZIPCODE, ADDRESS, NUMBER, COMPLEMENT, DISTRICT, CITY, STATE, NOTE, LASTLOCALSEQ, USERID) VALUES (1, 0, '2020-03-08', NULL, 'REICOL COMERCIO DE PECAS E SERVICOS EIRELI', 'REICOL COMERCIO DE PECAS E SERVICOS', '12.764.271/0001-00', '100.601-324', '12536', '74.430-420', 'AV SANTANA', '108', 'QUADRA 12 LOTE 10 ', 'RODOVIARIO', 'GOIANIA', 'GO', '', 2, 1);


DROP TABLE IF EXISTS COSTSHARINGLOCAL;
CREATE TABLE COSTSHARINGLOCAL (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    SEQ INTEGER NOT NULL,
    COSTSHARINGID INTEGER NOT NULL,
    NAME TEXT NOT NULL,
    ZIPCODE TEXT NOT NULL,
    ADDRESS TEXT NOT NULL,
    NUMBER INTEGER,
    COMPLEMENT TEXT,
    DISTRICT TEXT NOT NULL,
    CITY TEXT NOT NULL,
    STATE TEXT NOT NULL,
    FOREIGN KEY (COSTSHARINGID) REFERENCES COSTSHARING (ID) ON DELETE CASCADE
);
INSERT INTO COSTSHARINGLOCAL (ID, SEQ, COSTSHARINGID, NAME, ZIPCODE, ADDRESS, NUMBER, COMPLEMENT, DISTRICT, CITY, STATE) VALUES (1, 1, 1, 'SEDE', '74.825-130', 'Rua 1046 ', 0, '', 'Setor Pedro Ludovico', 'Goiânia', 'GO');
INSERT INTO COSTSHARINGLOCAL (ID, SEQ, COSTSHARINGID, NAME, ZIPCODE, ADDRESS, NUMBER, COMPLEMENT, DISTRICT, CITY, STATE) VALUES (2, 2, 1, 'CAST BR', '74.430-420', 'Avenida Santana ', 0, '', 'Rodoviário', 'Goiânia', 'GO');


DROP TABLE IF EXISTS HISTORY;
CREATE TABLE HISTORY
(
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  USERID INTEGER NOT NULL,
  ROUTINEID INTEGER NOT NULL,
  REGISTRY INTEGER NOT NULL,
  FIELD TEXT NOT NULL,
  OLDVALUE TEXT,
  NEWVALUE TEXT,
  CHANGEDATE TEXT NOT NULL,
  FOREIGN KEY (USERID) REFERENCES USER (ID) ON DELETE RESTRICT
);


DROP TABLE IF EXISTS ITEM;
CREATE TABLE ITEM
(
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  STATUSID INTEGER NOT NULL,
  CREATIONDATE TEXT NOT NULL,
  PHOTOPATH TEXT,
  NAME TEXT NOT NULL,
  ITEMUNITID INTEGER NOT NULL,
  ITEMGROUPID INTEGER NOT NULL,
  INTERNALCODE TEXT DEFAULT NULL,
  MANUFACTURER TEXT DEFAULT NULL,
  MANUFACTURERCODE TEXT DEFAULT NULL,
  NOTE TEXT,
  USERID INTEGER NOT NULL,
  FOREIGN KEY (ITEMUNITID) REFERENCES ITEMUNIT (ID) ON DELETE RESTRICT,
  FOREIGN KEY (ITEMGROUPID) REFERENCES ITEMGROUP (ID) ON DELETE RESTRICT,
  FOREIGN KEY (USERID) REFERENCES USER (ID) ON DELETE RESTRICT
);
INSERT INTO ITEM (ID, STATUSID, CREATIONDATE, PHOTOPATH, NAME, ITEMUNITID, ITEMGROUPID, INTERNALCODE, MANUFACTURER, MANUFACTURERCODE, NOTE, USERID) VALUES (1, 0, '2020-03-08', NULL, 'PAPEL A4', 1, 1, '02.150.2510', '', '', '', 1);
INSERT INTO ITEM (ID, STATUSID, CREATIONDATE, PHOTOPATH, NAME, ITEMUNITID, ITEMGROUPID, INTERNALCODE, MANUFACTURER, MANUFACTURERCODE, NOTE, USERID) VALUES (2, 0, '2020-03-08', NULL, 'PASTA L', 2, 1, '', '', '', '', 1);
INSERT INTO ITEM (ID, STATUSID, CREATIONDATE, PHOTOPATH, NAME, ITEMUNITID, ITEMGROUPID, INTERNALCODE, MANUFACTURER, MANUFACTURERCODE, NOTE, USERID) VALUES (3, 0, '2020-03-08', NULL, 'COLA BRANCA', 3, 1, '', '', '', '', 1);


DROP TABLE IF EXISTS ITEMGROUP;
CREATE TABLE ITEMGROUP
(
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  STATUSID INTEGER NOT NULL,
  CREATIONDATE TEXT NOT NULL,
  NAME TEXT NOT NULL UNIQUE,
  USERID INTEGER NOT NULL,
  FOREIGN KEY (USERID) REFERENCES USER (ID) ON DELETE RESTRICT
);
INSERT INTO ITEMGROUP (ID, STATUSID, CREATIONDATE, NAME, USERID) VALUES (1, 0, '2020-03-08', 'MATERIAL DE ESCRITORIO', 1);
INSERT INTO ITEMGROUP (ID, STATUSID, CREATIONDATE, NAME, USERID) VALUES (2, 0, '2020-03-08', 'MATERIAL DE INFORMATICA', 1);
INSERT INTO ITEMGROUP (ID, STATUSID, CREATIONDATE, NAME, USERID) VALUES (3, 0, '2020-03-08', 'MATERIAL PARA REVENDA', 1);


DROP TABLE IF EXISTS ITEMUNIT;
CREATE TABLE ITEMUNIT
(
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  STATUSID INTEGER NOT NULL,
  CREATIONDATE TEXT NOT NULL,
  NAME TEXT NOT NULL UNIQUE,
  INITIALS TEXT,
  USERID INTEGER NOT NULL,
  FOREIGN KEY (USERID) REFERENCES USER (ID) ON DELETE RESTRICT
);
INSERT INTO ITEMUNIT (ID, STATUSID, CREATIONDATE, NAME, INITIALS, USERID) VALUES (1, 0, '2020-03-08', 'UNIDADE', 'UN', 1);
INSERT INTO ITEMUNIT (ID, STATUSID, CREATIONDATE, NAME, INITIALS, USERID) VALUES (2, 0, '2020-03-08', 'METRO', 'M', 1);
INSERT INTO ITEMUNIT (ID, STATUSID, CREATIONDATE, NAME, INITIALS, USERID) VALUES (3, 0, '2020-03-08', 'QUILO', 'KG', 1);


DROP TABLE IF EXISTS PAYMENTTERM;
CREATE TABLE PAYMENTTERM
(
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  STATUSID INTEGER NOT NULL,
  CREATIONDATE TEXT NOT NULL,
  NAME TEXT NOT NULL UNIQUE,
  TYPEOFDAYSID INTEGER NOT NULL,
  USERID INTEGER NOT NULL,
  FOREIGN KEY (USERID) REFERENCES USER (ID) ON DELETE RESTRICT
);
INSERT INTO PAYMENTTERM (ID, STATUSID, CREATIONDATE, NAME, TYPEOFDAYSID, USERID) VALUES (1, 0, '2020-03-08', '30 DIAS', 1, 1);
INSERT INTO PAYMENTTERM (ID, STATUSID, CREATIONDATE, NAME, TYPEOFDAYSID, USERID) VALUES (2, 0, '2020-03-08', '30/60 DIAS', 1, 1);


DROP TABLE IF EXISTS PAYMENTTERMDAY;
CREATE TABLE PAYMENTTERMDAY
(
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  PAYMENTTERMID INT NOT NULL,
  DAYS INT NOT NULL,
  FOREIGN KEY (PAYMENTTERMID) REFERENCES PAYMENTTERM (ID) ON DELETE CASCADE
);
INSERT INTO PAYMENTTERMDAY (ID, PAYMENTTERMID, DAYS) VALUES (1, 1, 30);
INSERT INTO PAYMENTTERMDAY (ID, PAYMENTTERMID, DAYS) VALUES (2, 2, 30);
INSERT INTO PAYMENTTERMDAY (ID, PAYMENTTERMID, DAYS) VALUES (3, 2, 60);


DROP TABLE IF EXISTS PERSON;
CREATE TABLE PERSON
(
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  STATUSID INTEGER NOT NULL,
  CREATIONDATE TEXT NOT NULL,
  ENTITYTYPEID INTEGER NOT NULL,
  ISPROVIDER INTEGER NOT NULL,
  ISCUSTOMER INTEGER NOT NULL,
  ISCARRIER INTEGER NOT NULL,
  NAME TEXT NOT NULL,
  BUSINESSNAME TEXT,
  DOCUMENT1 TEXT NOT NULL UNIQUE,
  DOCUMENT2 TEXT,
  DOCUMENT3 TEXT,
  ZIPCODE TEXT,
  ADDRESS TEXT,
  NUMBER TEXT,
  COMPLEMENT TEXT,
  DISTRICT TEXT,
  CITY TEXT,
  STATE TEXT,
  NOTE TEXT,
  DEFAULTCONTACTID INTEGER NOT NULL DEFAULT 0,
  LASTCONTACTSEQ INTEGER NOT NULL DEFAULT 0,
  USERID INTEGER NOT NULL,
  FOREIGN KEY (USERID) REFERENCES USER (ID) ON DELETE RESTRICT
);
INSERT INTO PERSON (ID, STATUSID, CREATIONDATE, ENTITYTYPEID, ISPROVIDER, ISCUSTOMER, ISCARRIER, NAME, BUSINESSNAME, DOCUMENT1, DOCUMENT2, DOCUMENT3, ZIPCODE, ADDRESS, NUMBER, COMPLEMENT, DISTRICT, CITY, STATE, NOTE, DEFAULTCONTACTID, LASTCONTACTSEQ, USERID) VALUES (1, 0, '2020-03-08', 1, 1, 0, 0, 'EMSA EMPRESA SUL AMERICANA DE MONTAGENS S A', 'EMSA', '17.393.547/0001-05', '100', '200', '74.911-410', 'RODOVIA BR-153', 'SN', 'KM 504.6', 'VILA BRASILIA', 'APARECIDA DE GOIANIA', 'GO', '', 1, 2, 1);
INSERT INTO PERSON (ID, STATUSID, CREATIONDATE, ENTITYTYPEID, ISPROVIDER, ISCUSTOMER, ISCARRIER, NAME, BUSINESSNAME, DOCUMENT1, DOCUMENT2, DOCUMENT3, ZIPCODE, ADDRESS, NUMBER, COMPLEMENT, DISTRICT, CITY, STATE, NOTE, DEFAULTCONTACTID, LASTCONTACTSEQ, USERID) VALUES (2, 0, '2020-03-08', 1, 0, 0, 1, 'BRASPRESS TRANSPORTES', 'BRASPRESS', '12.764.271/0001-00', '', '', '', '', '', '', '', '', '', '', 0, 1, 1);


DROP TABLE IF EXISTS PERSONCONTACT;
CREATE TABLE PERSONCONTACT
(
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  SEQ INTEGER NOT NULL,
  PERSONID INTEGER NOT NULL,
  NAME TEXT NOT NULL,
  JOBTITLE TEXT,
  PHONE1 TEXT,
  PHONE2 TEXT,
  PHONE3 TEXT,
  EMAIL1 TEXT,
  EMAIL2 TEXT,
  FOREIGN KEY (PERSONID) REFERENCES PERSON (ID) ON DELETE CASCADE 
);
INSERT INTO PERSONCONTACT (ID, SEQ, PERSONID, NAME, JOBTITLE, PHONE1, PHONE2, PHONE3, EMAIL1, EMAIL2) VALUES (1, 1, 1, 'LEANDRO', 'COMPRADOR', '(62) 4008-1573', '(62) 9 9171-7968', '', 'leandrocgaldino@gmail.com', '');
INSERT INTO PERSONCONTACT (ID, SEQ, PERSONID, NAME, JOBTITLE, PHONE1, PHONE2, PHONE3, EMAIL1, EMAIL2) VALUES (2, 2, 1, 'THAINARA', 'GERENTE', '', '', '', '', '');
INSERT INTO PERSONCONTACT (ID, SEQ, PERSONID, NAME, JOBTITLE, PHONE1, PHONE2, PHONE3, EMAIL1, EMAIL2) VALUES (4, 1, 2, 'LARISSA', 'ADM', '(62) 3954-7106', NULL, NULL, 'larissa@gmail.com', NULL);
INSERT INTO PERSONCONTACT (ID, SEQ, PERSONID, NAME, JOBTITLE, PHONE1, PHONE2, PHONE3, EMAIL1, EMAIL2) VALUES (5, 2, 2, 'CLARISSE', 'ADM', '(62) 3241-4016', NULL, NULL, 'clarisse@gmail.com', NULL);


DROP TABLE IF EXISTS PURCHASEORDER;
CREATE TABLE PURCHASEORDER (ID INTEGER PRIMARY KEY AUTOINCREMENT, STATUSID INTEGER NOT NULL, CREATIONDATE TEXT NOT NULL, QUOTATIONID INTEGER, COSTSHARINGID INTEGER NOT NULL, COSTSHARINGLOCALID INTEGER, PERSONID INTEGER NOT NULL, CONTACT TEXT, PHONE TEXT, EMAIL TEXT, PAYMENTTERMID INTEGER NOT NULL, CARRIERID INTEGER, CARRIERTYPEID INTEGER NOT NULL, CARRIERPRICE INTEGER, DISCOUNT INTEGER, EXPENSE INTEGER, ICMSST INTEGER, INITIALDELIVERY TEXT NOT NULL, FINALDELIVERY TEXT NOT NULL, EXTERNALNOTE TEXT, INTERNALNOTE TEXT, LASTITEMSEQ INTEGER NOT NULL DEFAULT 0, USERID INTEGER NOT NULL, FOREIGN KEY (QUOTATIONID) REFERENCES QUOTATION (ID) ON DELETE RESTRICT, FOREIGN KEY (COSTSHARINGID) REFERENCES COSTSHARING (ID) ON DELETE RESTRICT, FOREIGN KEY (PERSONID) REFERENCES PERSON (ID) ON DELETE RESTRICT, FOREIGN KEY (PAYMENTTERMID) REFERENCES PAYMENTTERM (ID) ON DELETE RESTRICT, FOREIGN KEY (USERID) REFERENCES USER (ID) ON DELETE RESTRICT);
INSERT INTO PURCHASEORDER (ID, STATUSID, CREATIONDATE, QUOTATIONID, COSTSHARINGID, COSTSHARINGLOCALID, PERSONID, CONTACT, PHONE, EMAIL, PAYMENTTERMID, CARRIERID, CARRIERTYPEID, CARRIERPRICE, DISCOUNT, EXPENSE, ICMSST, INITIALDELIVERY, FINALDELIVERY, EXTERNALNOTE, INTERNALNOTE, LASTITEMSEQ, USERID) VALUES (1, 0, '2020-03-08', NULL, 1, 1, 1, 'LEANDRO', '(62) 4008-1573', 'leandrocgaldino@gmail.com', 2, 2, 3, 1000, 0, 1000, 0, '2020-03-08', '2020-04-10', 'PEDIDO DE COMPRA PARA TESTE', 'obs da oc impressa', 3, 1);


DROP TABLE IF EXISTS PURCHASEORDERITEM;
CREATE TABLE PURCHASEORDERITEM
(
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  SEQ INTEGER NOT NULL,
  DELIVERYDATE TEXT,
  PURCHASEORDERID INTEGER NOT NULL,
  QUANTITY INTEGER,
  ITEMUNITID INTEGER NOT NULL,
  ITEMID INTEGER NOT NULL,
  PRICE INTEGER,
  DISCOUNT INTEGER,
  COMPLEMENT TEXT,
  IPI INTEGER,
  ICMS INTEGER,
  FOREIGN KEY(PURCHASEORDERID) REFERENCES PURCHASEORDER(ID) ON DELETE CASCADE
);
INSERT INTO PURCHASEORDERITEM (ID, SEQ, DELIVERYDATE, PURCHASEORDERID, QUANTITY, ITEMUNITID, ITEMID, PRICE, DISCOUNT, COMPLEMENT, IPI, ICMS) VALUES (1, 1, NULL, 1, 1000, 1, 1, 1500, 300, 'COPIMAX', 10, 12);
INSERT INTO PURCHASEORDERITEM (ID, SEQ, DELIVERYDATE, PURCHASEORDERID, QUANTITY, ITEMUNITID, ITEMID, PRICE, DISCOUNT, COMPLEMENT, IPI, ICMS) VALUES (4, 2, NULL, 1, 1000, 1, 1, 2000, 200, 'COPIMAX', 10, 12);


DROP TABLE IF EXISTS QUOTATION;
CREATE TABLE QUOTATION
(
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  STATUSID INTEGER NOT NULL,
  CREATIONDATE TEXT NOT NULL,
  COSTID INTEGER NOT NULL,
  OFFERTYPEID INTEGER NOT NULL,
  NOTE TEXT,
  USERID INTEGER NOT NULL
);


DROP TABLE IF EXISTS QUOTATIONANSWER;
CREATE TABLE QUOTATIONANSWER
(
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  QUOTATIONID INTEGER NOT NULL,
  QUOTATIONPROVIDERID INTEGER NOT NULL,
  QUOTATIONITEMID INTEGER NOT NULL,
  COMPLEMENT TEXT,
  PRICE INTEGER,
  ICMS INTEGER,
  ICMSST INTEGER,
  IPI INTEGER,
  DISCOUNT INTEGER,
  EXPENSE INTEGER,
  QUANTITYPURCHASE INTEGER
);


DROP TABLE IF EXISTS QUOTATIONITEM;
CREATE TABLE QUOTATIONITEM
(
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  QUOTATIONID INTEGER NOT NULL,
  QUANTITY INTEGER,
  UNITID INTEGER NOT NULL,
  ITEMID INTEGER NOT NULL,
  ITEMGROUPID INTEGER NOT NULL,
  COMPLEMENT TEXT
);


DROP TABLE IF EXISTS QUOTATIONPROVIDER;
CREATE TABLE QUOTATIONPROVIDER
(
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  QUOTATIONID INTEGER NOT NULL,
  PROVIDERID INTEGER NOT NULL,
  CONTACT TEXT NOT NULL,
  PHONE TEXT,
  EMAIL TEXT,
  DOCUMENT TEXT,
  PAYMENTID INTEGER NOT NULL,
  CARRIERID INTEGER NOT NULL,
  CARRIERPRICE INTEGER,
  GENERALDISCOUNT INTEGER,
  GENERALEXPENSE INTEGER
);


DROP TABLE IF EXISTS REPORT;
CREATE TABLE REPORT (ID INTEGER PRIMARY KEY AUTOINCREMENT, REPORTGROUP TEXT, NAME TEXT, PATH TEXT, DIRECT INTEGER);
INSERT INTO REPORT (ID, REPORTGROUP, NAME, PATH, DIRECT) VALUES (25, 'Financeiro', 'Contas a Vencer', 'C:\Users\leand\OneDrive\PurchaseManager\PurchaseManager\bin\Debug\Report\PurchaseOrder.rep', 1);
INSERT INTO REPORT (ID, REPORTGROUP, NAME, PATH, DIRECT) VALUES (26, 'Estoque', 'Inventário', 'C:\Users\leand\OneDrive\PurchaseManager\PurchaseManager\bin\Debug\Report\PurchaseOrder.rep', 1);
INSERT INTO REPORT (ID, REPORTGROUP, NAME, PATH, DIRECT) VALUES (27, 'Gerencia', 'Rentabilidade', 'C:\Users\leand\OneDrive\PurchaseManager\PurchaseManager\bin\Debug\Report\PurchaseOrder.rep', 1);
INSERT INTO REPORT (ID, REPORTGROUP, NAME, PATH, DIRECT) VALUES (28, 'Compras', 'Pedido de Compra', 'C:\Users\leand\OneDrive\PurchaseManager\PurchaseManager\bin\Debug\Report\PurchaseOrder.rep', 1);
INSERT INTO REPORT (ID, REPORTGROUP, NAME, PATH, DIRECT) VALUES (29, 'Financeiro', 'Contas a Pagar', 'C:\Users\leand\OneDrive\PurchaseManager\PurchaseManager\bin\Debug\Report\PurchaseOrder.rep', 1);
INSERT INTO REPORT (ID, REPORTGROUP, NAME, PATH, DIRECT) VALUES (30, 'Compras', 'Compras Pendentes', 'C:\Users\leand\OneDrive\PurchaseManager\PurchaseManager\bin\Debug\Report\PurchaseOrder.rep', 1);
INSERT INTO REPORT (ID, REPORTGROUP, NAME, PATH, DIRECT) VALUES (31, 'Pessoas', 'Fornecedores Inativos', 'C:\Users\leand\OneDrive\PurchaseManager\PurchaseManager\bin\Debug\Report\PurchaseOrder.rep', 1);


DROP TABLE IF EXISTS USER;
CREATE TABLE USER
(
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  STATUSID INTEGER NOT NULL,
  CREATIONDATE TEXT NOT NULL,
  NAME TEXT NOT NULL UNIQUE,
  USERNAME TEXT NOT NULL UNIQUE,
  PASSWORD TEXT NOT NULL,
  PHONE TEXT,
  EMAIL TEXT,
  USERID INTEGER NOT NULL
);
INSERT INTO USER (ID, STATUSID, CREATIONDATE, NAME, USERNAME, PASSWORD, PHONE, EMAIL, USERID) VALUES (1, 0, '2020-02-01', 'ADMINISTRADOR', 'ADMIN', 'AF35624386DA7EC03052B33756C4392D', '(XX) XXXX-XXXX', 'X@X', 1);

COMMIT TRANSACTION;
PRAGMA foreign_keys = on;
